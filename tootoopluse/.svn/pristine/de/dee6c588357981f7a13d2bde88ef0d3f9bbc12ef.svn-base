package com.ninetowns.tootoopluse.adapter;

import java.util.List;

import android.app.Activity;
import android.content.Context;
import android.text.TextUtils;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.BaseExpandableListAdapter;
import android.widget.CheckedTextView;
import android.widget.GridView;
import android.widget.ImageView;
import android.widget.ListView;

import com.lidroid.xutils.ViewUtils;
import com.lidroid.xutils.view.annotation.ViewInject;
import com.ninetowns.tootoopluse.R;
import com.ninetowns.tootoopluse.application.TootooPlusEApplication;
import com.ninetowns.tootoopluse.bean.FreeGroupMemberBean;
import com.ninetowns.tootoopluse.bean.GridViewGroupBean;
import com.ninetowns.tootoopluse.util.CommonUtil;
import com.nostra13.universalimageloader.core.ImageLoader;
import com.nostra13.universalimageloader.core.imageaware.ImageViewAware;

public class MemberExpandAdpater extends BaseExpandableListAdapter {

	private FreeGroupMemberBean mGroupBean;

	private LayoutInflater mInflater;

	private Context mContext;

	public MemberExpandAdpater(Context context, FreeGroupMemberBean mGroupBean) {
		this.mGroupBean = mGroupBean;

		this.mContext = context;
		setInflater();
		
//		ListView.setA
	}

	private void setInflater() {
		mInflater = LayoutInflater.from(TootooPlusEApplication.getAppContext());
	}

	@Override
	public int getGroupCount() {

		return mGroupBean.getGroupBosss().size();
	}

	@Override
	public int getChildrenCount(int groupPosition) {

		return mGroupBean.getGroupChild().get(groupPosition).size();
	}

	@Override
	public Object getGroup(int groupPosition) {
		return mGroupBean.getGroupChild().get(groupPosition);
	}

	@Override
	public Object getChild(int groupPosition, int childPosition) {
		return mGroupBean.getGroupChild().get(groupPosition).get(childPosition);
	}

	@Override
	public long getGroupId(int groupPosition) {
		return groupPosition;
	}

	@Override
	public long getChildId(int groupPosition, int childPosition) {
		// TODO Auto-generated method stub
		return childPosition;
	}

	@Override
	public boolean hasStableIds() {
		return false;
	}

	@Override
	public View getGroupView(final int groupPosition, boolean isExpanded,
			View convertView, ViewGroup parent) {

		GridViewGroupBean photoGroup = mGroupBean.getGroupBosss().get(
				groupPosition);

		PhotoViewHolder photoViewHolder = null;
		if (convertView == null) {
			convertView = mInflater.inflate(R.layout.item_group_gridview_photo,
					null);
			photoViewHolder = new PhotoViewHolder();
			ViewUtils.inject(photoViewHolder, convertView);
			convertView.setTag(photoViewHolder);
		} else {
			photoViewHolder = (PhotoViewHolder) convertView.getTag();
		}
		// if (isPhotoClickable()) {
		// photoViewHolder.ivPhoto.setOnClickListener(new MyOnClickListener(
		// photoGroup));
		// }

		setUserInfo(photoGroup, photoViewHolder);
		return convertView;

	}

	public void setUserInfo(GridViewGroupBean photoBean,
			PhotoViewHolder photoViewHolder) {
		String logurl = photoBean.getLogoUrl();
		String userGrade = photoBean.getUserGrade();
		String userName = photoBean.getUserName();
		String status = photoBean.getStatus();
		String groupCount = photoBean.getMembers();
		if (!TextUtils.isEmpty(status)) {
			if (status.equals("1")) {
				// 组图成功
				photoViewHolder.mIVYestGroup.setVisibility(View.VISIBLE);
			} else {// 0未成功
				photoViewHolder.mIVYestGroup.setVisibility(View.GONE);
			}
		}
		if (!TextUtils.isEmpty(logurl)) {
			ImageLoader.getInstance().displayImage(logurl,
					new ImageViewAware(photoViewHolder.ivPhoto),
					CommonUtil.OPTIONS_HEADPHOTO);
		}
		// if (!TextUtils.isEmpty(userGrade)) {
		// // CommonUtil.setUserGrade(photoViewHolder.mCtUserInfo,
		// userGrade,"bottom");
		// }
		if (!TextUtils.isEmpty(userName)) {
			photoViewHolder.mCtUserInfo.setText(userName);
		}
		if (!TextUtils.isEmpty(groupCount)) {
			photoViewHolder.mCTGroupCount.setText(groupCount + "人");
		} else {
			photoViewHolder.mCTGroupCount.setText("0" + "人");
		}
	}

	@Override
	public View getChildView(int groupPosition, int childPosition,
			boolean isLastChild, View convertView, ViewGroup parent) {

		GridViewHolder mGridViewHolder = null;
		if (convertView == null) {

			convertView = mInflater.inflate(R.layout.mytempjoinmemberchild,
					null);
			mGridViewHolder = new GridViewHolder();
			convertView.setTag(mGridViewHolder);
		} else {
			mGridViewHolder = (GridViewHolder) convertView.getTag();
		}

		setGridViewAdapter(mGroupBean.getGroupChild().get(groupPosition),mGridViewHolder.mGridViewmember);
		
		return convertView;
	}

	public void setGridViewAdapter(List<GridViewGroupBean> list, GridView view) {

		GridViewGroupPhotoAdapter adapter = new GridViewGroupPhotoAdapter(
				(Activity) mContext, list);
		view.setAdapter(adapter);

	}

	@Override
	public boolean isChildSelectable(int groupPosition, int childPosition) {
		return false;
	}

	public static class PhotoViewHolder {
		@ViewInject(R.id.iv_photo_list)
		public ImageView ivPhoto;
		@ViewInject(R.id.ct_user_info)
		public CheckedTextView mCtUserInfo;
		@ViewInject(R.id.iv_yes_group)
		public ImageView mIVYestGroup;
		@ViewInject(R.id.ct_group_count)
		public CheckedTextView mCTGroupCount;

	}

	public static class GridViewHolder {
		@ViewInject(R.id.gl_member)
		public GridView mGridViewmember;
	}
}
